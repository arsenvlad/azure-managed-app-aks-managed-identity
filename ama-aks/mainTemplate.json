{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "aksName": {
      "type": "string",
      "metadata": {
        "description": "AKS Cluster Name"
      }
    },
    "nodeSize": {
      "type": "string",
      "defaultValue": "Standard_DS2_v2",
      "metadata": {
        "description": "Node Size"
      }
    },
    "nodeCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Node Count"
      }
    },
    "crossTenant": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Manually set flag whether to use delegatedManagedIdentityResourceId or not in role assignments"
      }
    }
  },
  "variables": {
    "adminUsername": "[concat('azureuser')]",
    "sshPublicKey": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9wmUPRLdMUJ8/HJz+gpp1YbE09W7HHsAmh0SoCUUrjCsdAoK7x9IQcl+5WP3H1JmtvejZRbPemxtbWgtN3aMvr4WxB0ukfdc4Dcsj73uyhBKn9pUAa/uQV0pwX1FsTNsLF8U99kjfEmCwW6bHOS5PB2E9Kh0pw8i1A36kcgudtoWd6XmwLwlAeVtK+ULkHUHNjOxqLXzbISKeARnhBzqnlA/g+usYEvTLL/VzKFd8FZEF+UBxo5FNVuFIyyXSEr2lRMiaa0W++E1EWhwGNn5weM36vFaZS0So2I8tV/aEb7hfpVe9hSrGjkijAwh+E+nNvjyg0Z1Y407nKvCD9yLr sshKey1",
    "logAnalyticsWorkspaceName": "[concat(parameters('aksName'),uniqueString(resourceGroup().id))]",
    "storageAccountName": "[concat(parameters('aksName'),uniqueString(resourceGroup().id))]",
    "vnetName": "[concat('vnet-',parameters('aksName'))]",
    "vmName": "[concat('bootstrapvm-',parameters('aksName'))]",
    "nsgName": "[concat('nsg-',parameters('aksName'))]",
    "nicName": "[concat('nic-',parameters('aksName'))]",
    "pipName": "[concat('pip-',parameters('aksName'))]",
    "pipDns": "[concat(parameters('aksName'),'-',uniqueString(resourceGroup().id))]",
    "identityName": "[concat(parameters('aksName'),'-identity')]",
    "nodeResourceGroup": "[concat(resourceGroup().name,'-aks-rg')]",
    "roleDefinitionOwner": "8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
    "roleDefinitionManagedIdentityOperator": "f1a07417-d97a-45cb-824c-7a7467783830",
    "roleDefinitionVirtualMachineContributor": "9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
    "roleDefinitionMonitoringMetricsPublisher": "3913510d-42f4-4e42-8a64-420c390055eb"
  },
  "resources": [
    {
      "comments": "*** Azure Marketplace required usage attribution tracking GUID ***",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "pid-442cf8d0-27a2-4caa-9b53-3d93b8c4bbd1",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
          ]
        }
      }
    },
    {
      "comments": "*** Identity that will be used by bootstraping VM and will be assigned Owner role to the Managed Resource Group ***",
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[variables('identityName')]",
      "location": "[parameters('location')]"
    },
    {
      "comments": "*** Assign Owner role to the Managed Resource Group using cross-tenant delegatedManagedIdentityResourceId property ***",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2021-04-01-preview",
      "name": "[guid(resourceGroup().id, variables('identityName'), variables('roleDefinitionOwner'))]",
      "dependsOn": [
        "[variables('identityName')]"
      ],
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions',variables('roleDefinitionOwner'))]",
        "principalId": "[reference(variables('identityName')).principalId]",
        "principalType": "ServicePrincipal",
        "scope": "[resourceGroup().id]",
        "delegatedManagedIdentityResourceId": "[if(parameters('crossTenant'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',variables('identityName')), json('null'))]"
      }
    },
    {
      "comments": "*** Log Analytics workspace for AKS monitoring ***",
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-06-01",
      "name": "[variables('logAnalyticsWorkspaceName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "pergb2018"
        },
        "retentionInDays": 730,
        "workspaceCapping": {
          "dailyQuotaGb": -1
        }
      }
    },
    {
      "comments": "*** Logs Analytics ContainerInsights Solution for AKS ***",
      "type": "Microsoft.OperationsManagement/solutions",
      "apiVersion": "2015-11-01-preview",
      "name": "[concat('ContainerInsights', '(', variables('logAnalyticsWorkspaceName'), ')')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('logAnalyticsWorkspaceName')]"
      ],
      "plan": {
        "name": "[concat('ContainerInsights', '(', variables('logAnalyticsWorkspaceName'), ')')]",
        "product": "OMSGallery/ContainerInsights",
        "promotionCode": "",
        "publisher": "Microsoft"
      },
      "properties": {
        "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
      }
    },
    {
      "comments": "*** AKS cluster with custom-named nodeResourceGroup and system assigned managed identity ***",
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2021-10-01",
      "location": "[parameters('location')]",
      "name": "[parameters('aksName')]",
      "dependsOn": [
        "[variables('logAnalyticsWorkspaceName')]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "nodeResourceGroup": "[variables('nodeResourceGroup')]",
        "dnsPrefix": "[parameters('aksName')]",
        "enableRBAC": true,
        "agentPoolProfiles": [
          {
            "name": "agentpool",
            "count": "[parameters('nodeCount')]",
            "vmSize": "[parameters('nodeSize')]",
            "osType": "Linux",
            "storageProfile": "ManagedDisks",
            "type": "VirtualMachineScaleSets",
            "mode": "System"
          }
        ],
        "linuxProfile": {
          "adminUsername": "[variables('adminUsername')]",
          "ssh": {
            "publicKeys": [
              {
                "keyData": "[variables('sshPublicKey')]"
              }
            ]
          }
        },
        "networkProfile": {
          "loadBalancerSku": "standard",
          "outboundType": "loadBalancer"
        },
        "apiServerAccessProfile": {
          "enablePrivateCluster": false
        },
        "addonProfiles": {
          "httpApplicationRouting": {
            "enabled": false
          },
          "omsagent": {
            "enabled": true,
            "config": {
              "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            }
          }
        }
      }
    },
    {
      "comments": "*** Monitoring Metrics Publisher Role Assignment to AKS for Container Insights ***",
      "type": "Microsoft.ContainerService/managedClusters/providers/roleAssignments",
      "apiVersion": "2021-04-01-preview",
      "name": "[concat(parameters('aksName'),'/Microsoft.Authorization/',guid(resourceGroup().id, parameters('aksName'), variables('roleDefinitionMonitoringMetricsPublisher')))]",
      "dependsOn": [
        "[parameters('aksName')]"
      ],
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions',variables('roleDefinitionMonitoringMetricsPublisher'))]",
        "principalId": "[reference(parameters('aksName'),'2020-03-01','Full').properties.addonProfiles.omsagent.identity.objectId]",
        "principalType": "ServicePrincipal",
        "scope": "[resourceId('Microsoft.ContainerService/managedClusters', parameters('aksName'))]",
        "delegatedManagedIdentityResourceId": "[if(parameters('crossTenant'), reference(parameters('aksName'),'2020-03-01','Full').properties.addonProfiles.omsagent.identity.resourceId, json('null'))]"
      }
    },
    {
      "comments": "*** After creating the AKS resource, wait via sleep for up to 35+ minutes to make sure that AMA RP role assignment is properly applied to the AKS Node Resource Group and not receive intermittent Forbidden error from ARM ***",
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "sleep-after-aks",
      "location": "[parameters('location')]",
      "kind": "AzureCLI",
      "dependsOn": [
        "[parameters('aksName')]"
      ],
      "properties": {
        "azCliVersion": "2.32.0",
        "scriptContent": "sleep 2110",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "PT4H",
        "timeout": "PT2H"
      }
    },
    {
      "comments": "*** After AKS cluster gets deployed plus a delay of 35+ minutes to make sure AMA RP gets proper permissions, use inner-scope nested template to get AKS managed identity resourceId and principalId ***",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "get-aks-mi",
      "resourceGroup": "[variables('nodeResourceGroup')]",
      "dependsOn": [
        "[parameters('aksName')]",
        "[variables('vmName')]",
        "sleep-after-aks"
      ],
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "parameters": {
          "aksMiResourceId": {
            "value": "[reference(parameters('aksName'),'2021-10-01','Full').properties.identityProfile.kubeletIdentity.resourceId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "aksMiResourceId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {},
          "resources": [],
          "outputs": {
            "aksMiResourceId": {
              "type": "string",
              "value": "[parameters('aksMiResourceId')]"
            },
            "aksMiPrincipalId": {
              "type": "string",
              "value": "[reference(parameters('aksMiResourceId'),'2018-11-30','Full').properties.principalId]"
            }
          }
        }
      }
    },
    {
      "comments": "*** Nested cross-resource-group role assignment to the AKS Node Resource Group ***",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[concat('ra-',guid(resourceGroup().id))]",
      "resourceGroup": "[variables('nodeResourceGroup')]",
      "dependsOn": [
        "[variables('identityName')]",
        "[parameters('aksName')]",
        "get-aks-mi"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "comments": "*** Assign Owner role to the user assigned identity cross-tenant ***",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2021-04-01-preview",
              "name": "[guid(variables('nodeResourceGroup'), variables('identityName'), variables('roleDefinitionOwner'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions',variables('roleDefinitionOwner'))]",
                "principalId": "[reference(variables('identityName')).principalId]",
                "principalType": "ServicePrincipal",
                "scope": "[concat(subscription().id,'/resourceGroups/',variables('nodeResourceGroup'))]",
                "delegatedManagedIdentityResourceId": "[if(parameters('crossTenant'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',variables('identityName')), json('null'))]"
              }
            },
            {
              "comments": "*** Assign Managed Identity Operator role to AKS' managed identity cross-tenant (for Pod Identity) ***",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2021-04-01-preview",
              "name": "[guid(variables('nodeResourceGroup'), 'aksmi', variables('roleDefinitionManagedIdentityOperator'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions',variables('roleDefinitionManagedIdentityOperator'))]",
                "principalId": "[reference('get-aks-mi','2019-10-01').outputs.aksMiPrincipalId.value]",
                "principalType": "ServicePrincipal",
                "scope": "[concat(subscription().id,'/resourceGroups/',variables('nodeResourceGroup'))]",
                "delegatedManagedIdentityResourceId": "[if(parameters('crossTenant'), reference('get-aks-mi','2019-10-01').outputs.aksMiResourceId.value, json('null'))]"
              }
            },
            {
              "comments": "*** Assign Virtual Machine Operator role to AKS' managed identity cross-tenant (for Pod Identity) ***",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2021-04-01-preview",
              "name": "[guid(variables('nodeResourceGroup'), 'aksvmo', variables('roleDefinitionVirtualMachineContributor'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions',variables('roleDefinitionVirtualMachineContributor'))]",
                "principalId": "[reference('get-aks-mi','2019-10-01').outputs.aksMiPrincipalId.value]",
                "principalType": "ServicePrincipal",
                "scope": "[concat(subscription().id,'/resourceGroups/',variables('nodeResourceGroup'))]",
                "delegatedManagedIdentityResourceId": "[if(parameters('crossTenant'), reference('get-aks-mi','2019-10-01').outputs.aksMiResourceId.value, json('null'))]"
              }
            }
          ]
        }
      }
    },
    {
      "comments": "*** ADLS Gen2 storage account for testing storage access from AKS pods ***",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-08-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "isHnsEnabled": true,
        "supportsHttpsTrafficOnly": true,
        "accessTier": "Hot"
      }
    },
    {
      "comments": "*** Public IP for bootstrap VM ***",
      "type": "Microsoft.Network/publicIpAddresses",
      "apiVersion": "2020-11-01",
      "name": "[variables('pipName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIpAllocationMethod": "Dynamic",
        "publicIPAddressVersion": "IPv4",
        "dnsSettings": {
          "domainNameLabel": "[variables('pipDns')]"
        },
        "idleTimeoutInMinutes": 4
      },
      "sku": {
        "name": "Basic",
        "tier": "Regional"
      }
    },
    {
      "comments": "*** Network Security Group for bootstrap VM ***",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-11-01",
      "name": "[variables('nsgName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "SSH",
            "properties": {
              "priority": 1000,
              "protocol": "TCP",
              "access": "Allow",
              "direction": "Inbound",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22"
            }
          }
        ]
      }
    },
    {
      "comments": "*** Virtual Network for bootstrap VM ***",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-11-01",
      "name": "[variables('vnetName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('nsgName')]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "default",
            "properties": {
              "addressPrefix": "10.0.0.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
              },
              "privateEndpointNetworkPolicies": "Enabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          }
        ]
      }
    },
    {
      "comments": "*** Network Interface for bootstrap VM ***",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "[variables('nicName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('pipName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnetName'),'default')]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "publicIpAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipName'))]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
        }
      }
    },
    {
      "comments": "*** Bootstrap VM with user assigned managed identity with Owner role to the Managed Resource Group and AKS Node Resource Group ***",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-11-01",
      "name": "[variables('vmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('nicName')]",
        "[variables('identityName')]",
        "[parameters('aksName')]"
      ],
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('identityName'))]": {}
        }
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('nodeSize')]"
        },
        "storageProfile": {
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "StandardSSD_LRS"
            }
          },
          "imageReference": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "18.04-LTS",
            "version": "latest"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[variables('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
              "publicKeys": [
                {
                  "path": "[concat('/home/', variables('adminUsername'), '/.ssh/authorized_keys')]",
                  "keyData": "[variables('sshPublicKey')]"
                }
              ]
            }
          }
        }
      }
    }
  ],
  "outputs": {
    "aksName": {
      "type": "string",
      "value": "[parameters('aksName')]"
    },
    "aksFqdn": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters/', parameters('aksName'))).fqdn]"
    },
    "managedResourceGroup": {
      "type": "string",
      "value": "[resourceGroup().id]"
    },
    "userAssignedIdentity": {
      "type": "string",
      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('identityName'))]"
    },
    "subscription": {
      "type": "object",
      "value": "[subscription()]"
    }
  }
}
